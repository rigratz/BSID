-- MySQL Script generated by MySQL Workbench
-- ...and then edited as needed

-- Tue Aug 11 20:34:19 2015
-- Model: New Model    Version: 1.0
-- MySQL Workbench Forward Engineering

SET @OLD_UNIQUE_CHECKS=@@UNIQUE_CHECKS, UNIQUE_CHECKS=0;
SET @OLD_FOREIGN_KEY_CHECKS=@@FOREIGN_KEY_CHECKS, FOREIGN_KEY_CHECKS=0;
SET @OLD_SQL_MODE=@@SQL_MODE, SQL_MODE='TRADITIONAL,ALLOW_INVALID_DATES';

-- -----------------------------------------------------
-- Schema mydb
-- -----------------------------------------------------

-- -----------------------------------------------------
-- Schema mydb
-- -----------------------------------------------------
CREATE SCHEMA IF NOT EXISTS `Book_Store` DEFAULT CHARACTER SET utf8 COLLATE utf8_general_ci ;
USE `Book_Store` ;

-- -----------------------------------------------------
-- Table `mydb`.`Location`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `Book_Store`.`Location` (
  `genre` VARCHAR(25) NOT NULL COMMENT '',
  `section` VARCHAR(25) NOT NULL COMMENT '',
  PRIMARY KEY (`genre`)  COMMENT '')
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `mydb`.`Book`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `Book_Store`.`Book` (
  `ISBN` VARCHAR(13) NOT NULL COMMENT '',
  `title` VARCHAR(80) NOT NULL COMMENT '',
  `authorLast` VARCHAR(20) NOT NULL COMMENT '',
  `authorFirst` VARCHAR(20) NOT NULL COMMENT '',
  `listPrice` DECIMAL(10, 2) NOT NULL COMMENT '',
  `Location_genre` VARCHAR(25) NOT NULL COMMENT '',
  PRIMARY KEY (`ISBN`)  COMMENT '',
  INDEX `fk_Book_Location1_idx` (`Location_genre` ASC)  COMMENT '',
  CONSTRAINT `fk_Book_Location1`
    FOREIGN KEY (`Location_genre`)
    REFERENCES `Book_Store`.`Location` (`genre`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `mydb`.`Inventory`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `Book_Store`.`Inventory` (
  `inventoryNum` INT NOT NULL COMMENT '',
  `inStockDate` DATETIME NOT NULL COMMENT '',
  `saleDate` DATETIME NULL COMMENT '',
  `flagMissing` TINYINT(1) NOT NULL COMMENT '',
  `Book_ISBN` VARCHAR(13) NOT NULL COMMENT '',
  PRIMARY KEY (`inventoryNum`)  COMMENT '',
  INDEX `fk_Inventory_Book1_idx` (`Book_ISBN` ASC)  COMMENT '',
  CONSTRAINT `fk_Inventory_Book1`
    FOREIGN KEY (`Book_ISBN`)
    REFERENCES `Book_Store`.`Book` (`ISBN`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `mydb`.`PriceHistory`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `Book_Store`.`PriceHistory` (
  `Book_ISBN` VARCHAR(13) NOT NULL COMMENT '',
  `listPrice` DECIMAL(10, 2) NOT NULL COMMENT '',
  `condition` VARCHAR(15) NOT NULL COMMENT '',
  `storePrice` DECIMAL(10, 2) NOT NULL COMMENT '',
  `priceDate` DATETIME NOT NULL COMMENT '',
  PRIMARY KEY (`Book_ISBN`, `listPrice`)  COMMENT '',
  INDEX `fk_PriceHistory_Book1_idx` (`Book_ISBN` ASC)  COMMENT '',
  CONSTRAINT `fk_PriceHistory_Book1`
    FOREIGN KEY (`Book_ISBN`)
    REFERENCES `Book_Store`.`Book` (`ISBN`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB;

DROP TABLE WishList;
-- -----------------------------------------------------
-- Table `mydb`.`Wishlist`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `Book_Store`.`Wishlist` (
  `wishID` INT NOT NULL COMMENT '',
  `customerName` VARCHAR(40) NOT NULL COMMENT '',
  `CustomerPhone` VARCHAR(11) NOT NULL COMMENT '',
  `wishTitle` VARCHAR(80) NOT NULL COMMENT '',
  `wishAuthorLast` VARCHAR(20) NOT NULL COMMENT '',
  `wishAuthorFirst` VARCHAR(20) NOT NULL COMMENT '',
  `Book_ISBN` VARCHAR(13) NOT NULL COMMENT '',
  PRIMARY KEY (`wishID`)  COMMENT '',
  INDEX `fk_Wishlist_Book1_idx` (`Book_ISBN` ASC)  COMMENT '')
ENGINE = InnoDB;


SET SQL_MODE=@OLD_SQL_MODE;
SET FOREIGN_KEY_CHECKS=@OLD_FOREIGN_KEY_CHECKS;
SET UNIQUE_CHECKS=@OLD_UNIQUE_CHECKS;

INSERT INTO Location(genre, section)
VALUES ('Mystery', 'Fiction'),
		('SciFi', 'Fiction'),
        ('Horror', 'Fiction'),
        ('Fiction', 'Fiction'),
        ('Computer Science', 'Science'),
        ('True Crime', 'True Crime'),
        ('Music', 'Performing Arts'),
        ('Humor', 'Games and Humor');
        
INSERT INTO Book(ISBN, title, authorLast, authorFirst, listPrice, Location_genre)
VALUES ('9780393339758', 'The Shallows', 'Carr', 'Nicholas', 15.95, 'Computer Science'),
		('1400032806', 'Under the Banner of Heaven', 'Krakauer', 'Jon', 14.95, 'True Crime'),
        ('9781401928353', 'Soulacoaster', 'Kelly', 'R.', 29.95, 'Music'),
        ('9780446580502', 'I Am America (And So Can You)', 'Colbert', 'Stephen', 26.99, 'Humor'),
        ('9780142003237', 'Live And Let Die', 'Fleming', 'Ian', 15.00, 'Mystery'),
        ('9780307887443', 'Ready Player One', 'Cline', 'Ernest', 14.00, 'SciFi'),
        ('9780061740312', 'Out Of Sight', 'Leonard', 'Elmore', 14.99, 'Mystery'),
        ('9780062119469', 'Raylan', 'Leonard', 'Elmore', 26.99, 'Mystery'),
        ('0385333498', 'The Sirens of Titan', 'Vonnegut', 'Kurt', 14.00, 'Fiction'),
        ('9780062068255', 'The Strain', 'Del Toro', 'Guillermo', 16.99, 'Horror'),
        ('0440844819', 'Calvin and Hobbes', 'Watterson', 'Bill', 9.99, 'Humor'),
        ('9780131873254', 'Database Systems', 'Garcia-Molina', 'Hector', 203.99, 'Computer Science');
        
        
#From this base, all other data for the
#store inventory can be added through the 
#Java GUI using the following views and procedures.

CREATE VIEW InventoryView AS
SELECT inventoryNum, ISBN, title, CONCAT(authorLast, ', ', authorFirst) Author, 
		Location_genre 'genre', storePrice, `condition`, inStockDate, saleDate 
FROM Inventory I JOIN Book B ON B.ISBN = I.Book_ISBN JOIN PriceHistory PH 
							ON I.inStockDate = PH.priceDate;

CREATE VIEW StockView AS
SELECT inventoryNum, title, CONCAT(authorLast, ', ', authorFirst) Author, genre, storePrice, section
FROM Inventory I JOIN Book B ON B.ISBN = I.Book_ISBN 
				JOIN PriceHistory PH ON I.inStockDate = PH.priceDate
                JOIN Location ON Location_genre = genre
WHERE saleDate IS NULL;

CREATE VIEW WishView AS
SELECT customerName, CustomerPhone, title, CONCAT(authorLast, ', ', authorFirst) Author
FROM Wishlist NATURAL JOIN Inventory JOIN Book ON ISBN = Book_ISBN
WHERE saleDate IS NULL;

DELIMITER $
CREATE PROCEDURE makeAWish(cusName VARCHAR(40), cusPhone VARCHAR(11), wishTitle VARCHAR(40),
						wishAuthorLast VARCHAR(20), wishAuthorFirst VARCHAR(20), wishISBN VARCHAR(13))
	BEGIN
		DECLARE wishNum INT;
        SET wishNum = (SELECT COUNT(*) FROM WishList) + 1;
        
        UNIQUENUM: WHILE wishNum IN (SELECT wishID FROM WishList) DO
			SET wishNum = wishNum + 1;
		END WHILE UNIQUENUM;
        
		INSERT INTO WishList VALUES (
			wishNum, cusName, cusPhone, wishTitle, wishAuthorLast, wishAuthorFirst, wishISBN);
	END $
DELIMITER ;

DELIMITER $
CREATE PROCEDURE priceBook(bookNum VARCHAR(13), cond VARCHAR(15), price DECIMAL(10, 2))
	BEGIN
		DECLARE invCount INT;
        SET invCount = 1 + (SELECT COUNT(*) FROM Inventory);
	
		IF bookNum IN (SELECT ISBN FROM Book) THEN
		
			INSERT INTO Inventory VALUES
			(invCount, NOW(), NULL, FALSE, bookNum);
            
			INSERT INTO PriceHistory VALUES
			(bookNum, (SELECT listPrice FROM Book WHERE ISBN = bookNum), cond, price, 
				(SELECT inStockDate FROM Inventory WHERE inventoryNum = invCount));
		END IF;
	
    END $
DELIMITER ;

DELIMITER $
CREATE PROCEDURE lookupBook(bookNum VARCHAR(13))
	BEGIN
		SELECT *
        FROM Book
        WHERE bookNum = ISBN;
	END $
DELIMITER ;
DELIMITER $
CREATE PROCEDURE sellBook(invNum INT)
	BEGIN
		UPDATE Inventory SET saleDate = NOW() WHERE invNum = inventoryNum;
    END $
DELIMITER ;
DELIMITER $
CREATE PROCEDURE addBook(isbNum VARCHAR(13), t VARCHAR(30), aL VARCHAR(25), aF VARCHAR(25),
					lPrice DECIMAL(10, 2), gen VARCHAR(25))
	BEGIN
		INSERT INTO Book VALUES
        (isbNum, t, aL, aF, lPrice, gen);
        
	END $
DELIMITER ;
